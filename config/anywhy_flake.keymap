#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm_l: hm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 42 43 44 45 36 38 39 40 37>;
            hold-trigger-on-release;
        };

        hm_r: hm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 44 45 43>;
            hold-trigger-on-release;
        };

        hm_l_shift: hm_l_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_L_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-on-release;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 42 43 44 45 38 39 40 36 37>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        hm_r_shift: hm_r_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_R_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 45 43 42 44>;
            hold-trigger-on-release;
        };

        mod_delete: mod_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        qw_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
            timeout-ms = <50>;
        };
    };

    macros {
        bt_clr_0: bt_clr_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &bt BT_CLR>;
            label = "BT_CLR_0";
        };

        bt_clr_1: bt_clr_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &bt BT_CLR>;
            label = "BT_CLR_1";
        };

        bt_clr_2: bt_clr_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &bt BT_CLR>;
            label = "BT_CLR_2";
        };

        bt_clr_3: bt_clr_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &bt BT_CLR>;
            label = "BT_CLR_3";
        };

        bt_clr_4: bt_clr_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &bt BT_CLR>;
            label = "BT_CLR_4";
        };

        xw_save: xw_save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp W &kp ENTER>;
            label = "XW_SAVE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp ENTER       &kp Q             &kp W             &kp E                 &kp R                     &kp Y        &kp Z  &kp U                      &kp I          &kp O              &kp P                      &mod_delete
&studio_unlock  &hm_l LEFT_GUI A  &hm_l S LEFT_ALT  &hm_l D LCTRL         &hm_l_shift LEFT_SHIFT F  &kp G        &kp H  &hm_r_shift RIGHT_SHIFT J  &hm_r RCTRL K  &hm_r RIGHT_ALT K  &hm_r SEMICOLON RIGHT_GUI  &kp EQUAL
&kp LEFT_SHIFT  &kp Z             &kp X             &kp C                 &kp V                     &kp B        &kp N  &kp M                      &kp COMMA      &kp DOT            &kp FSLH                   &kp BACKSLASH
                &kp LCTRL         &kp LALT          &mt LEFT_META ESCAPE  &lt 3 SPACE               &lt 1 TAB    &mo 2  &kp ENTER                  &kp LGUI       &kp LALT           &kp LCTRL
            >;
        };

        num {
            bindings = <
&none  &trans  &trans  &trans  &trans  &trans    &kp LEFT_BRACKET  &kp N7  &kp N8     &kp N9  &kp RIGHT_BRACKET  &none
&none  &trans  &trans  &trans  &trans  &trans    &kp SEMICOLON     &kp N4  &kp N5     &kp N6  &kp EQUAL          &none
&none  &trans  &trans  &trans  &trans  &trans    &kp GRAVE         &kp N1  &kp N2     &kp N3  &kp BSLH           &none
       &trans  &trans  &trans  &trans  &none     &kp PERIOD        &kp N0  &kp MINUS  &trans  &trans
            >;
        };

        fn {
            bindings = <
&none  &kp F12  &kp F7  &kp F8  &kp F9  &soft_off         &none  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_BRI_UP  &none
&none  &kp F10  &kp F4  &kp F5  &kp F6  &kp CAPS          &none  &trans      &trans        &trans        &trans        &none
&none  &kp F11  &kp F1  &kp F2  &kp F3  &studio_unlock    &none  &kp C_PP    &kp C_PREV    &kp C_NEXT    &kp C_BRI_DN  &none
       &trans   &trans  &trans  &trans  &none             &none  &trans      &trans        &trans        &trans
            >;
        };

        nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &trans          &trans         &trans        &trans           &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp CAPSLOCK  &kp LEFT_ARROW  &kp DOWN       &kp UP_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp INSERT    &kp HOME        &kp PAGE_DOWN  &kp PAGE_UP   &kp END          &trans
        &trans  &trans  &trans  &trans  &trans    &trans        &trans          &trans         &trans        &trans
            >;
        };
    };
};
